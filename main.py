from aiogram import Bot, Dispatcher, types, filters, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.mongo import MongoStorage
from db import DataBase
from utils import get_config, save_config, str2file
from time import time
from asyncio import sleep
from keyboards import Keyboards

config_filename = "config.json"
config = get_config(config_filename)
keyboards = Keyboards(texts=config["texts"])
db = DataBase(config["db_url"], config["db_name"])
bot = Bot(token=config["bot_token"], parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MongoStorage(db_name=config["db_name"], uri=config["db_url"]))
owners_filter = filters.IDFilter(user_id=config["owners"])

class Form(StatesGroup):
    lang = State()
    mailing = State()
    mailing_markup = State()
    show = State()
    show_markup = State()

class UsersMiddleware(BaseMiddleware):
    def __init__(self) -> None:
        super(UsersMiddleware, self).__init__()

    async def on_pre_process_message(self, message: types.Message, data: dict) -> None:
        user = {}
        if message.chat.type == types.ChatType.PRIVATE:
            user_id = message.chat.id
            user = db.get_user(user_id)
            if not user:
                db.add_user(user_id)
                user = db.get_user(user_id)
        data["user"] = user

async def on_shutdown(dp: Dispatcher) -> None:
    save_config(config_filename, config)
    db.close()
    await dp.storage.close()
    await dp.storage.wait_closed()

@dp.message_handler(owners_filter, commands=["users", "count"])
async def owners_users_command_handler(message: types.Message) -> None:
    count = db.get_users_count()
    await message.answer(text=config["texts"]["users_count"].format(count=count))


@dp.message_handler(owners_filter, commands=["export"])
async def owners_export_command_handler(message: types.Message) -> None:
    msg = await message.answer(text=config["texts"]["please_wait"])
    file = str2file(" ".join([str(user["user_id"]) for user in db.get_user()]), "users.txt")
    try:
        await message.answer_document(file)
    except:
        await message.answer(text=config["texts"]["no_users"])
    await msg.delete()

@dp.message_handler(owners_filter, commands=["mail", "mailing"])
async def owners_mailing_command_handler(message: types.Message) -> None:

    await Form.mailing.set()

    await message.answer(
        text=config["texts"]["enter_mailing"],
        reply_markup=keyboards.cancel()
    )


@dp.message_handler(content_types=types.ContentType.all(), state=Form.mailing)
async def owners_process_mailing_handler(message: types.Message, state: FSMContext) -> None:

    async with state.proxy() as data:
        data["message"] = message.to_python()

    await Form.mailing_markup.set()

    await message.answer(
        config["texts"]["enter_mailing_markup"],
        reply_markup=keyboards.cancel()
    )


@dp.message_handler(state=Form.mailing_markup)
async def owners_process_mailing_markup_handler(message: types.Message, state: FSMContext) -> None:

    if message.text not in ["-", "."]:
        try:
            markup = keyboards.from_str(message.text)

        except:
            await message.answer(
                text=config["texts"]["incorrect_mailing_markup"],
                reply_markup=keyboards.cancel()
            )

            return

    else:
        markup = types.InlineKeyboardMarkup()

    markup = markup.to_python()

    async with state.proxy() as data:
        _message = data["message"]

    total = 0
    sent = 0
    unsent = 0

    await state.finish()

    await message.answer(config["texts"]["start_mailing"])

    start = time()

    kwargs = {
        "from_chat_id": _message["chat"]["id"],
        "message_id": _message["message_id"],
        "reply_markup": markup
    }

    for user in db.get_user():
        kwargs["chat_id"] = user["user_id"]

        try:
            await bot.copy_message(**kwargs)
            sent += 1

        except:
            unsent += 1

        total += 1

        await sleep(config["sleep_time"])

    await message.answer(
        config["texts"]["mailing_stats"].format(
            total=total,
            sent=sent,
            unsent=unsent,
            time=round(time() - start, 3)
        )
    )

@dp.message_handler(owners_filter, commands=["add_url"])
async def owners_add_channel_command_handler(message: types.Message) -> None:


    args = message.text.split(" ")[1:]

    if len(args) < 1:
        await message.answer(text=config["texts"]["incorrect_value"])
        return

    config["urls"]["url"] = args[0]
    save_config(config_filename, config)

    await message.answer(text=config["texts"]["saved"])

@dp.message_handler(owners_filter, commands=["remove_all_urls"])
async def owners_add_channel_command_handler(message: types.Message) -> None:

    config["urls"].clear()
    save_config(config_filename, config)

    await message.answer(text=config["texts"]["saved"])


@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message) -> None:

    await message.answer(
        text='–ü—Ä–∏–≤–µ—Ç, —Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ —Å–ª—É—á–∞–π–Ω–æüòÑ\n–¢—ã –¥—É–º–∞–µ—à—å –µ—Å–ª–∏ —Ç—ã —à–∫–æ–ª—å–Ω–∏–∫ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç, —Ç–æ –Ω–µ —Å–º–æ–∂–µ—à—å '
             '–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º?ü•≤\n- –≠—Ç–æ –Ω–µ —Ç–∞–∫, –¢–ï–ë–ï –ù–£–ñ–ï–ù –í–°–ï–ì–û 1‚ÇΩüò±\n\n–î–æ—Ä–æ–≥–∏–µ –ø–æ–¥–∞—Ä–∫–∏ üéÅ\n–ë–∞–ª–æ–≤–∞—Ç—å —Å–µ–±—èü§§'
             '–ü–æ–∫—É–ø–∞—Ç—å –≤—Å–µ —á—Ç–æ –∑–∞—Ö–æ—á–µ—à—åüòé\n–ü–æ–º–æ–≥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –∏ –±–ª–∏–∑–∫–∏–ºüë®‚Äçüë©‚Äçüëß‚Äçüë¶\n–î–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º, —á—Ç–æ –¢–´ –í–°–ï –ú–û–ñ–ï–®–¨üòâ\n'
             '–ü–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –í–°–ï‚ÄºÔ∏è\n\n–ò –ø–æ–≤—Ç–æ—Ä—é—Å—å, —Ç–µ–±–µ –Ω—É–∂–µ–Ω –≤—Å–µ–≥–æ 1‚ÇΩ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:)\n–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –≤—Å–µ —Ä–∞–≤–Ω–æ '
             '–Ω–∏—á–µ–≥–æ –Ω–µ —Ç–µ—Ä—è–µ—à—åüò±\n\n–°–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π ¬´–ù–ê–ß–ê–¢–¨‚úÖ¬ª –∏ –∏–∑–º–µ–Ω–∏ –°–í–û–Æ –∂–∏–∑–Ω—å –≤ –ª—É—á—à—É—é —Å—Ç–æ—Ä–æ–Ω—Éüëáüèª',
        reply_markup=keyboards.start()
    )

@dp.callback_query_handler(state="*")
async def callback_query_handler(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await state.finish()

    args = callback_query.data.split("_")

    if args[0] == "cancel":
        await callback_query.message.edit_text(
            text = config["texts"]["cancelled"]
        )

    elif callback_query.data == 'start':
        await bot.send_message(callback_query.from_user.id,
                               text='8/10 —á–µ–ª–æ–≤–µ–∫ –Ω–µ –¥–æ—Ö–æ–¥—è—Ç –¥–æ —ç—Ç–æ–≥–æ —à–∞–≥–∞, —Ç—ã –º–æ–ª–æ–¥–µ—Ü, –∂–∏–∑–Ω—å –ª—é–±–∏—Ç —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω—ã—Ö '
                                    '–ª—é–¥–µ–πüí∏\n\n–Ø –¥–æ–±—ã–ª–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–πüòâ'
                                    '\n\n–í—Å—ë, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤‚Ä¶\n–ù–∏–∂–µ –æ—Å—Ç–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É, –Ω–∞–∂–∏–º–∞–π –Ω–∞ ¬´–ù–ê–ß–ê–¢–¨ '
                                    '–ó–ê–†–ê–ë–ê–¢–´–í–ê–¢–¨üí∏¬ª –∏ –º–µ–Ω—è–π —Å–≤–æ—é –∂–∏–∑–Ω—å –≤ –ª—É—á—à—É—é —Å—Ç–æ—Ä–æ–Ω—É\n–ü–µ—Ä–µ—Ö–æ–¥–∏üëáüèª',
                               reply_markup=keyboards.url(config["urls"]["url"]))

dp.middleware.setup(UsersMiddleware())


if __name__ == "__main__":
    executor.start_polling(dispatcher=dp, skip_updates=False, on_shutdown=on_shutdown)